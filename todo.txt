
consider nuget support for net40

Do the collation hook fix thing for config_log

consider whether maybe the sqlite3 intptr dispose should check
the version number and call sqlite3_close_v2 when it's supposedly
available.

switch to xUnit?

maybe I should have config_csproj instead of three different
flavors of same.

fix the appropriate Windows platforms to support UseSQLiteFrom
set to "elsewhere", which will instruct it not to install a sqlite
lib.

switch my env keywords to be the same as the ones nuget uses?

test_cases.cs nuget, nunit vs mstest

add visual studio 2013 c++ runtime sdkreference.  but injecting an
SDKReference in the .targets file sort of doesn't work, and using
a powershell tool is so inelegant.  MESSAGE.

annoying that an injected reference doesn't show up in the
References list in visual studio

error if configuration is not release or debug
but configuration in xamarin.ios is actually stuff like iPhone, etc

should we use the sqlite sdks in the vs gallery instead?
weird that they're not nuget.  and weird that there isn't
one for regular net45.  and the distinction between the two
flavors of WP81 is not there.  and the WP81 is pre-release.

why does the sqlitepcl ios platform assembly show
no assembly info when viewed in xamarin studio?

for the cppinterop dll build, why does winrt80 generate .exp
and .lib?

Win32 in the sln file

auto-generate the test projects as well?

do we need separate platform assemblies for .NET 4.5 vs 4.5.1 ?

docs: need a complete list, in tabular form, of the platform
assemblies and an explanation of the use cases for each one.
auto-generate this.

need at least one test project for each platform assembly.  

add an NUnit project on Windows/Net45, so that build breakage
with NUnit can be detected when making changes on windows.
should reference NUnit as a nuget package

sqlite3.Mac?  or use platform-installed sqlite on MacOS?

docs on all the methods in raw, especially where the params
differ from the C API

question about whether we are statically linking the C library
or not, for the mixed mode assembly.

i hate the way all the tests show up in visual studio, 5 tests with
the same name, no way to distinguish between the platform versions
of each test.

fix those weird compiler warnings on iOS and Android ?

note that SQLitePCL.Ugly only builds with the "new" reflection APIs.

----------------

sqlite API issues:

should sqlite3_commit_hook() return something?  the C function returns the
user pointer, which has no useful parallel for us to return.  I sort of hate
the fact that it returns void, since we can't check errors on it.  but
the underlying C function doesn't really return any useful info for error
checking either.

unprotected sqlite3_value:  sqlite3_column_value, sqlite3_bind_value, sqlite3_result_value

sqlite3_create_module

sqlite3_db_config

sqlite3_db_filename
sqlite3_db_mutex
sqlite3_db_readonly

sqlite3_get_auxdata
sqlite3_set_auxdata

sqlite3_limit

sqlite3_progress_handler

sqlite3_randomness

sqlite3_soft_heap_limit64

sqlite3_wal_autocheckpoint
sqlite3_wal_checkpoint
sqlite3_wal_checkpoint_v2
sqlite3_wal_hook

sqlite3_busy_handler

sqlite3_collation_needed -- difficult because of the be handle passed
to the callback

sqlite3_config


